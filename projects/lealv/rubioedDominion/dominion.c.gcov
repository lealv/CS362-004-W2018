        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:10
        -:    0:Programs:10
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 81261 returned 100% blocks executed 100%
    81261:    8:int compare(const void* a, const void* b) {
    81261:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 51% (fallthrough)
branch  1 taken 49%
    41370:   10:    return 1;
    39891:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
    39442:   12:    return -1;
      449:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:      int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 20 returned 100% blocks executed 83%
       20:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:       struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
       20:   44:  SelectStream(1);
call    0 returned 100%
       20:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:
        -:   47:  //check number of players
       20:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       20:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      220:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
     2200:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
     2000:   61:    if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:      {
    #####:   63:        return -1;
        -:   64:      }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       20:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
       20:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       20:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
       20:   89:      state->supplyCount[estate] = 8;
       20:   90:      state->supplyCount[duchy] = 8;
       20:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       20:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       20:  102:  state->supplyCount[silver] = 40;
       20:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      420:  106:  for (i = adventurer; i <= treasure_map; i++)        //loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     3300:  108:      for (j = 0; j < 10; j++)              //loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:  {
     3100:  110:    if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:      {
        -:  112:        //check if card is a 'Victory' Kingdom card
      200:  113:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  114:    {
    #####:  115:      if (numPlayers == 2){
branch  0 never executed
branch  1 never executed
    #####:  116:        state->supplyCount[i] = 8;
        -:  117:      }
    #####:  118:      else{ state->supplyCount[i] = 12; }
        -:  119:    }
        -:  120:        else
        -:  121:    {
      200:  122:      state->supplyCount[i] = 10;
        -:  123:    }
      200:  124:        break;
        -:  125:      }
        -:  126:    else    //card is not in the set choosen for the game
        -:  127:      {
     2900:  128:        state->supplyCount[i] = -1;
        -:  129:      }
        -:  130:  }
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       60:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
       40:  140:      state->deckCount[i] = 0;
      160:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:  {
      120:  143:    state->deck[i][j] = estate;
      120:  144:    state->deckCount[i]++;
        -:  145:  }
      320:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:  {
      280:  148:    state->deck[i][j] = copper;
      280:  149:    state->deckCount[i]++;
        -:  150:  }
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       60:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
       40:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:  {
    #####:  158:    return -1;
        -:  159:  }
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       60:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {
        -:  165:      //initialize hand size to zero
       40:  166:      state->handCount[i] = 0;
       40:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //  {
        -:  171:      //    drawCard(i, state);
        -:  172:      //  }
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
      560:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      540:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       20:  182:  state->outpostPlayed = 0;
       20:  183:  state->phase = 0;
       20:  184:  state->numActions = 1;
       20:  185:  state->numBuys = 1;
       20:  186:  state->playedCardCount = 0;
       20:  187:  state->whoseTurn = 0;
       20:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      120:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      100:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
       20:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
       20:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 99 returned 100% blocks executed 100%
       99:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       99:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       99:  209:  if (state->deckCount[player] < 1)
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        7:  210:    return -1;
       92:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    12192:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
    12008:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
    12008:  216:    newDeck[newDeckPos] = state->deck[player][card];
    12008:  217:    newDeckPos++;
   933215:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
   921207:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    12008:  221:    state->deckCount[player]--;
        -:  222:  }
    12100:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
    12008:  224:    state->deck[player][i] = newDeck[i];
    12008:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       92:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0;     //tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 32 returned 100% blocks executed 100%
       32:  320:int supplyCount(int card, struct gameState *state) {
       32:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 10013 returned 100% blocks executed 100%
    10013:  346:int whoseTurn(struct gameState *state) {
    10013:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 68 returned 100% blocks executed 100%
       68:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
       68:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  396:    {
       34:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
       34:  401:  j = 0;
      884:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
      850:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 32% (fallthrough)
branch  1 taken 68%
        -:  405:  {
      270:  406:    j++;
        -:  407:  }
        -:  408:    }
       34:  409:  if ( j >= 3)
branch  0 taken 82% (fallthrough)
branch  1 taken 18%
        -:  410:    {
       28:  411:      return 1;
        -:  412:    }
        -:  413:
        6:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:  {
    #####:  469:    players[i] = -9999;
        -:  470:  }
        -:  471:      else
        -:  472:  {
    #####:  473:    players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:  }
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:  {
    #####:  483:    j = i;
        -:  484:  }
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:  {
    #####:  494:    players[i]++;
        -:  495:  }
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:  {
    #####:  504:    j = i;
        -:  505:  }
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:  {
    #####:  514:    players[i] = 1;
        -:  515:  }
        -:  516:      else
        -:  517:  {
    #####:  518:    players[i] = 0;
        -:  519:  }
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 25130 returned 100% blocks executed 100%
    25130:  525:int drawCard(int player, struct gameState *state)
        -:  526:{ int count;
        -:  527:  int deckCounter;
    25130:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    11665:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
    11608:  534:      state->deck[player][i] = state->discard[player][i];
    11608:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
       57:  538:    state->deckCount[player] = state->discardCount[player];
       57:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       57:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
       57:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       57:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
       57:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       57:  559:    if (deckCounter == 0)
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
        5:  560:      return -1;
        -:  561:
       52:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       52:  563:    state->deckCount[player]--;
       52:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    25073:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    25073:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    25073:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    25073:  576:    state->deckCount[player]--;
    25073:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    25125:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 56 returned 100% blocks executed 100%
       56:  583:int getCost(int cardNumber)
        -:  584:{
       56:  585:  switch( cardNumber )
branch  0 taken 4%
branch  1 taken 4%
branch  2 taken 4%
branch  3 taken 4%
branch  4 taken 4%
branch  5 taken 4%
branch  6 taken 4%
branch  7 taken 4%
branch  8 taken 4%
branch  9 taken 4%
branch 10 taken 4%
branch 11 taken 4%
branch 12 taken 4%
branch 13 taken 4%
branch 14 taken 4%
branch 15 taken 4%
branch 16 taken 4%
branch 17 taken 4%
branch 18 taken 4%
branch 19 taken 4%
branch 20 taken 4%
branch 21 taken 4%
branch 22 taken 4%
branch 23 taken 4%
branch 24 taken 4%
branch 25 taken 4%
branch 26 taken 4%
branch 27 taken 4%
        -:  586:    {
        -:  587:    case curse:
        2:  588:      return 0;
        -:  589:    case estate:
        2:  590:      return 2;
        -:  591:    case duchy:
        2:  592:      return 5;
        -:  593:    case province:
        2:  594:      return 8;
        -:  595:    case copper:
        2:  596:      return 0;
        -:  597:    case silver:
        2:  598:      return 3;
        -:  599:    case gold:
        2:  600:      return 6;
        -:  601:    case adventurer:
        2:  602:      return 6;
        -:  603:    case council_room:
        2:  604:      return 5;
        -:  605:    case feast:
        2:  606:      return 4;
        -:  607:    case gardens:
        2:  608:      return 4;
        -:  609:    case mine:
        2:  610:      return 5;
        -:  611:    case remodel:
        2:  612:      return 4;
        -:  613:    case smithy:
        2:  614:      return 4;
        -:  615:    case village:
        2:  616:      return 3;
        -:  617:    case baron:
        2:  618:      return 4;
        -:  619:    case great_hall:
        2:  620:      return 3;
        -:  621:    case minion:
        2:  622:      return 5;
        -:  623:    case steward:
        2:  624:      return 3;
        -:  625:    case tribute:
        2:  626:      return 5;
        -:  627:    case ambassador:
        2:  628:      return 3;
        -:  629:    case cutpurse:
        2:  630:      return 4;
        -:  631:    case embargo:
        2:  632:      return 2;
        -:  633:    case outpost:
        2:  634:      return 5;
        -:  635:    case salvager:
        2:  636:      return 4;
        -:  637:    case sea_hag:
        2:  638:      return 4;
        -:  639:    case treasure_map:
        2:  640:      return 4;
        -:  641:    }
        -:  642:
        2:  643:  return -1;
        -:  644:}
        -:  645:
function smithyCard called 5003 returned 100% blocks executed 100%
     5003:  646:void smithyCard (int handPos, int currentPlayer, struct gameState *state)
        -:  647:{
        -:  648:  int i;//I added this here...
        -:  649:   //+3 Cards
    25015:  650:    for (i = 0; i <= 3; i++)//I introduced a bug where the current player will only draw 4 card instead of 3 cards. I changed the logic from "i < 3" to "i <= 3"
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  651:    {
    20012:  652:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  653:    }
        -:  654:
        -:  655:    //discard card from hand
     5003:  656:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
     5003:  657:}
        -:  658:
function adventurerCard called 5 returned 100% blocks executed 100%
        5:  659:void adventurerCard(int temphand[], int z, int currentPlayer, struct gameState *state)
        -:  660:{
        5:  661:  int drawntreasure = 0; //I added this...
        -:  662:  int cardDrawn; //I added this...
        -:  663:
       25:  664:  while(drawntreasure<2){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
       15:  665:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 13% (fallthrough)
branch  1 taken 87%
        2:  666:      shuffle(currentPlayer, state);
call    0 returned 100%
        -:  667:    }
       15:  668:    drawCard(currentPlayer, state);
call    0 returned 100%
       15:  669:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       15:  670:    if (cardDrawn == copper || cardDrawn == silver){//I introduced a bug here, where I removed the "cardDrawn == gold" card which is not counted it when drawn
branch  0 taken 87% (fallthrough)
branch  1 taken 13%
branch  2 taken 62% (fallthrough)
branch  3 taken 38%
       10:  671:      drawntreasure++;
        -:  672:  }
        -:  673:    else{
        5:  674:      temphand[z]=cardDrawn;
        5:  675:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        5:  676:      z++;
        -:  677:    }
        -:  678:  }
        -:  679:
       15:  680:  while(z-1>=0){
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        5:  681:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        5:  682:    z=z-1;
        -:  683:  }
        -:  684:
        5:  685:}
        -:  686:
function council_roomCard called 0 returned 0% blocks executed 0%
    #####:  687:void council_roomCard (int currentPlayer, struct gameState *state, int handPos)
        -:  688:{
        -:  689:  int i;//I added this here...
        -:  690:  //+4 Cards
    #####:  691:  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  692:  {
    #####:  693:    drawCard(currentPlayer, state);
call    0 never executed
        -:  694:  }
        -:  695:
        -:  696:  //+1 Buy
    #####:  697:  state->numBuys++;
        -:  698:
        -:  699:  //Each other player draws a card
    #####:  700:  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  701:  {
    #####:  702:    if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  703:    {
    #####:  704:      drawCard(i, state);
call    0 never executed
        -:  705:    }
    #####:  706:    i++;//I introduced this bug here, this will skip half of the players. First player will draw a card, then second wont, then 3rd will draw, etc.
        -:  707:  }
        -:  708:
        -:  709:  //put played card in played card pile
    #####:  710:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  711:
    #####:  712:}
        -:  713:
function great_hallCard called 2 returned 100% blocks executed 100%
        2:  714:void great_hallCard(int currentPlayer, struct gameState *state, int handPos)
        -:  715:{
        -:  716:  //+1 Card
        -:  717:  //drawCard(currentPlayer, state);//I introduced bug here, by removing draw card
        -:  718:
        -:  719:  //+1 Actions
        2:  720:  state->numActions++;
        -:  721:
        -:  722:  //discard card from hand
        2:  723:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  724:
        2:  725:}
        -:  726:
function outpostCard called 0 returned 0% blocks executed 0%
    #####:  727:void outpostCard(struct gameState *state, int handPos, int currentPlayer)
        -:  728:{
        -:  729:  //set outpost flag
    #####:  730:  state->outpostPlayed++;
        -:  731:
        -:  732:  //discard card
    #####:  733:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  734:
    #####:  735:}
        -:  736:
function cardEffect called 10013 returned 100% blocks executed 6%
    10013:  737:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  738:{
        -:  739:  int i;
        -:  740:  int j;
        -:  741:  int k;
        -:  742:  int x;
        -:  743:  int index;
    10013:  744:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
    10013:  745:  int nextPlayer = currentPlayer + 1;
        -:  746:
    10013:  747:  int tributeRevealedCards[2] = {-1, -1};
        -:  748:  int temphand[MAX_HAND];// moved above the if statement
    10013:  749:  int drawntreasure=0;
        -:  750:  int cardDrawn;
    10013:  751:  int z = 0;// this is the counter for the temp hand
    10013:  752:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 49% (fallthrough)
branch  1 taken 51%
     4925:  753:    nextPlayer = 0;
        -:  754:  }
        -:  755:
        -:  756:
        -:  757:  //uses switch to select card and perform actions
    10013:  758:  switch( card )
branch  0 taken 1%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 50%
branch  7 taken 50%
branch  8 taken 0%
branch  9 taken 1%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  759:    {
        -:  760:    case adventurer:
        5:  761:      adventurerCard(temphand, z, currentPlayer, state);
call    0 returned 100%
        5:  762:      return 0;
        -:  763:
        -:  764:    case council_room:
    #####:  765:      council_roomCard(currentPlayer, state, handPos);
call    0 never executed
    #####:  766:      return 0;
        -:  767:
        -:  768:    case feast:
        -:  769:          //gain card with cost up to 5
        -:  770:          //Backup hand
    #####:  771:          for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  772:      temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  773:      state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  774:          }
        -:  775:          //Backup hand
        -:  776:
        -:  777:          //Update Coins for Buy
    #####:  778:          updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  779:          x = 1;//Condition to loop on
    #####:  780:          while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  781:      if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  782:        if (DEBUG)
        -:  783:          printf("None of that card left, sorry!\n");
        -:  784:
        -:  785:        if (DEBUG){
        -:  786:          printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  787:        }
        -:  788:      }
    #####:  789:      else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  790:        printf("That card is too expensive!\n");
call    0 never executed
        -:  791:
        -:  792:        if (DEBUG){
        -:  793:          printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  794:        }
        -:  795:      }
        -:  796:      else{
        -:  797:
        -:  798:        if (DEBUG){
        -:  799:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  800:        }
        -:  801:
    #####:  802:        gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  803:        x = 0;//No more buying cards
        -:  804:
        -:  805:        if (DEBUG){
        -:  806:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  807:        }
        -:  808:
        -:  809:      }
        -:  810:          }
        -:  811:
        -:  812:          //Reset Hand
    #####:  813:          for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  814:      state->hand[currentPlayer][i] = temphand[i];
    #####:  815:      temphand[i] = -1;
        -:  816:          }
        -:  817:          //Reset Hand
        -:  818:
    #####:  819:          return 0;
        -:  820:
        -:  821:    case gardens:
    #####:  822:        return -1;
        -:  823:
        -:  824:    case mine:
    #####:  825:            j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  826:
    #####:  827:            if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  828:        {
    #####:  829:          return -1;
        -:  830:        }
        -:  831:
    #####:  832:            if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  833:        {
    #####:  834:          return -1;
        -:  835:        }
        -:  836:
    #####:  837:            if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  838:        {
    #####:  839:          return -1;
        -:  840:        }
        -:  841:
    #####:  842:            gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  843:
        -:  844:            //discard card from hand
    #####:  845:            discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  846:
        -:  847:            //discard trashed card
    #####:  848:            for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  849:        {
    #####:  850:          if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  851:            {
    #####:  852:              discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  853:              break;
        -:  854:            }
        -:  855:        }
        -:  856:
    #####:  857:            return 0;
        -:  858:
        -:  859:    case remodel:
    #####:  860:              j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  861:
    #####:  862:              if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  863:          {
    #####:  864:            return -1;
        -:  865:          }
        -:  866:
    #####:  867:              gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  868:
        -:  869:              //discard card from hand
    #####:  870:              discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  871:
        -:  872:              //discard trashed card
    #####:  873:              for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  874:          {
    #####:  875:            if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  876:              {
    #####:  877:                discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  878:                break;
        -:  879:              }
        -:  880:          }
        -:  881:
        -:  882:
    #####:  883:              return 0;
        -:  884:
        -:  885:    case smithy:
     5003:  886:      smithyCard(handPos, currentPlayer, state);
call    0 returned 100%
     5003:  887:      return 0;
        -:  888:
        -:  889:    case village:
        -:  890:          //+1 Card
     5003:  891:          drawCard(currentPlayer, state);
call    0 returned 100%
        -:  892:
        -:  893:          //+2 Actions
     5003:  894:          state->numActions = state->numActions + 2;
        -:  895:
        -:  896:          //discard played card from hand
     5003:  897:          discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
     5003:  898:          return 0;
        -:  899:
        -:  900:    case baron:
    #####:  901:              state->numBuys++;//Increase buys by 1!
    #####:  902:              if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  903:          int p = 0;//Iterator for hand!
    #####:  904:          int card_not_discarded = 1;//Flag for discard set!
    #####:  905:          while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  906:            if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  907:              state->coins += 4;//Add 4 coins to the amount of coins
    #####:  908:              state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  909:              state->discardCount[currentPlayer]++;
    #####:  910:              for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  911:                state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  912:              }
    #####:  913:              state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  914:              state->handCount[currentPlayer]--;
    #####:  915:              card_not_discarded = 0;//Exit the loop
        -:  916:            }
    #####:  917:            else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  918:              if(DEBUG) {
        -:  919:                printf("No estate cards in your hand, invalid choice\n");
        -:  920:                printf("Must gain an estate if there are any\n");
        -:  921:              }
    #####:  922:              if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  923:                gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  924:                state->supplyCount[estate]--;//Decrement estates
    #####:  925:                if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  926:            isGameOver(state);
call    0 never executed
        -:  927:                }
        -:  928:              }
    #####:  929:              card_not_discarded = 0;//Exit the loop
        -:  930:            }
        -:  931:
        -:  932:            else{
    #####:  933:              p++;//Next card
        -:  934:            }
        -:  935:          }
        -:  936:              }
        -:  937:
        -:  938:              else{
    #####:  939:          if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  940:            gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  941:            state->supplyCount[estate]--;//Decrement Estates
    #####:  942:            if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  943:              isGameOver(state);
call    0 never executed
        -:  944:            }
        -:  945:          }
        -:  946:              }
        -:  947:
        -:  948:
    #####:  949:              return 0;
        -:  950:
        -:  951:    case great_hall:
        2:  952:      great_hallCard(currentPlayer, state, handPos);
call    0 returned 100%
        2:  953:      return 0;
        -:  954:
        -:  955:    case minion:
        -:  956:            //+1 action
    #####:  957:            state->numActions++;
        -:  958:
        -:  959:            //discard card from hand
    #####:  960:            discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  961:
    #####:  962:            if (choice1)    //+2 coins
branch  0 never executed
branch  1 never executed
        -:  963:        {
    #####:  964:          state->coins = state->coins + 2;
        -:  965:        }
        -:  966:
    #####:  967:            else if (choice2)   //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  968:        {
        -:  969:          //discard hand
    #####:  970:          while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  971:            {
    #####:  972:              discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  973:            }
        -:  974:
        -:  975:          //draw 4
    #####:  976:          for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  977:            {
    #####:  978:              drawCard(currentPlayer, state);
call    0 never executed
        -:  979:            }
        -:  980:
        -:  981:          //other players discard hand and redraw if hand size > 4
    #####:  982:          for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  983:            {
    #####:  984:              if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  985:          {
    #####:  986:            if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  987:              {
        -:  988:                //discard hand
    #####:  989:                while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  990:            {
    #####:  991:              discardCard(handPos, i, state, 0);
call    0 never executed
        -:  992:            }
        -:  993:
        -:  994:                //draw 4
    #####:  995:                for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  996:            {
    #####:  997:              drawCard(i, state);
call    0 never executed
        -:  998:            }
        -:  999:              }
        -: 1000:          }
        -: 1001:            }
        -: 1002:
        -: 1003:        }
    #####: 1004:            return 0;
        -: 1005:
        -: 1006:    case steward:
    #####: 1007:            if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1008:        {
        -: 1009:          //+2 cards
    #####: 1010:          drawCard(currentPlayer, state);
call    0 never executed
    #####: 1011:          drawCard(currentPlayer, state);
call    0 never executed
        -: 1012:        }
    #####: 1013:            else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1014:        {
        -: 1015:          //+2 coins
    #####: 1016:          state->coins = state->coins + 2;
        -: 1017:        }
        -: 1018:            else
        -: 1019:        {
        -: 1020:          //trash 2 cards in hand
    #####: 1021:          discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1022:          discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1023:        }
        -: 1024:
        -: 1025:            //discard card from hand
    #####: 1026:            discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1027:            return 0;
        -: 1028:
        -: 1029:    case tribute:
    #####: 1030:                if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1031:            if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1032:              tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1033:              state->deckCount[nextPlayer]--;
        -: 1034:            }
    #####: 1035:            else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1036:              tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1037:              state->discardCount[nextPlayer]--;
        -: 1038:            }
        -: 1039:            else{
        -: 1040:              //No Card to Reveal
        -: 1041:              if (DEBUG){
        -: 1042:                printf("No cards to reveal\n");
        -: 1043:              }
        -: 1044:            }
        -: 1045:                }
        -: 1046:
        -: 1047:                else{
    #####: 1048:            if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1049:              for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1050:                state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1051:                state->deckCount[nextPlayer]++;
    #####: 1052:                state->discard[nextPlayer][i] = -1;
    #####: 1053:                state->discardCount[nextPlayer]--;
        -: 1054:              }
        -: 1055:
    #####: 1056:              shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1057:            }
    #####: 1058:            tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1059:            state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1060:            state->deckCount[nextPlayer]--;
    #####: 1061:            tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1062:            state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1063:            state->deckCount[nextPlayer]--;
        -: 1064:                }
        -: 1065:
    #####: 1066:                if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####: 1067:            state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1068:            state->playedCardCount++;
    #####: 1069:            tributeRevealedCards[1] = -1;
        -: 1070:                }
        -: 1071:
    #####: 1072:                for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1073:            if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1074:              state->coins += 2;
        -: 1075:            }
        -: 1076:
    #####: 1077:            else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1078:              drawCard(currentPlayer, state);
call    0 never executed
    #####: 1079:              drawCard(currentPlayer, state);
call    0 never executed
        -: 1080:            }
        -: 1081:            else{//Action Card
    #####: 1082:              state->numActions = state->numActions + 2;
        -: 1083:            }
        -: 1084:                }
        -: 1085:
    #####: 1086:                return 0;
        -: 1087:
        -: 1088:    case ambassador:
    #####: 1089:                j = 0;    //used to check if player has enough cards to discard
        -: 1090:
    #####: 1091:                if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1092:            {
    #####: 1093:              return -1;
        -: 1094:            }
        -: 1095:
    #####: 1096:                if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1097:            {
    #####: 1098:              return -1;
        -: 1099:            }
        -: 1100:
    #####: 1101:                for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1102:            {
    #####: 1103:              if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1104:                {
    #####: 1105:                  j++;
        -: 1106:                }
        -: 1107:            }
    #####: 1108:                if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1109:            {
    #####: 1110:              return -1;
        -: 1111:            }
        -: 1112:
        -: 1113:                if (DEBUG)
        -: 1114:            printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1115:
        -: 1116:                //increase supply count for choosen card by amount being discarded
    #####: 1117:                state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1118:
        -: 1119:                //each other player gains a copy of revealed card
    #####: 1120:                for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1121:            {
    #####: 1122:              if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1123:                {
    #####: 1124:                  gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1125:                }
        -: 1126:            }
        -: 1127:
        -: 1128:                //discard played card from hand
    #####: 1129:                discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1130:
        -: 1131:                //trash copies of cards returned to supply
    #####: 1132:                for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1133:            {
    #####: 1134:              for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1135:                {
    #####: 1136:                  if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1137:              {
    #####: 1138:                discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1139:                break;
        -: 1140:              }
        -: 1141:                }
        -: 1142:            }
        -: 1143:
    #####: 1144:                return 0;
        -: 1145:
        -: 1146:    case cutpurse:
        -: 1147:
    #####: 1148:              updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1149:              for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1150:          {
    #####: 1151:            if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1152:              {
    #####: 1153:                for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1154:            {
    #####: 1155:              if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1156:                {
    #####: 1157:                  discardCard(j, i, state, 0);
call    0 never executed
    #####: 1158:                  break;
        -: 1159:                }
    #####: 1160:              if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1161:                {
    #####: 1162:                  for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1163:              {
        -: 1164:                if (DEBUG)
        -: 1165:                  printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1166:              }
    #####: 1167:                  break;
        -: 1168:                }
        -: 1169:            }
        -: 1170:
        -: 1171:              }
        -: 1172:
        -: 1173:          }
        -: 1174:
        -: 1175:              //discard played card from hand
    #####: 1176:              discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1177:
    #####: 1178:              return 0;
        -: 1179:
        -: 1180:
        -: 1181:    case embargo:
        -: 1182:      //+2 Coins
    #####: 1183:      state->coins = state->coins + 2;
        -: 1184:
        -: 1185:      //see if selected pile is in play
    #####: 1186:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1187:  {
    #####: 1188:    return -1;
        -: 1189:  }
        -: 1190:
        -: 1191:      //add embargo token to selected supply pile
    #####: 1192:      state->embargoTokens[choice1]++;
        -: 1193:
        -: 1194:      //trash card
    #####: 1195:      discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1196:      return 0;
        -: 1197:
        -: 1198:    case outpost:
    #####: 1199:      outpostCard(state, handPos, currentPlayer);
call    0 never executed
    #####: 1200:      return 0;
        -: 1201:
        -: 1202:    case salvager:
        -: 1203:      //+1 buy
    #####: 1204:      state->numBuys++;
        -: 1205:
    #####: 1206:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1207:  {
        -: 1208:    //gain coins equal to trashed card
    #####: 1209:    state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1210:    //trash card
    #####: 1211:    discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1212:  }
        -: 1213:
        -: 1214:      //discard card
    #####: 1215:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1216:      return 0;
        -: 1217:
        -: 1218:    case sea_hag:
    #####: 1219:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1220:  if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1221:    state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];          state->deckCount[i]--;
    #####: 1222:    state->discardCount[i]++;
    #####: 1223:    state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1224:  }
        -: 1225:      }
    #####: 1226:      return 0;
        -: 1227:
        -: 1228:    case treasure_map:
        -: 1229:      //search hand for another treasure_map
    #####: 1230:      index = -1;
    #####: 1231:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1232:  {
    #####: 1233:    if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1234:      {
    #####: 1235:        index = i;
    #####: 1236:        break;
        -: 1237:      }
        -: 1238:  }
    #####: 1239:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1240:  {
        -: 1241:    //trash both treasure cards
    #####: 1242:    discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1243:    discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1244:
        -: 1245:    //gain 4 Gold cards
    #####: 1246:    for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1247:      {
    #####: 1248:        gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1249:      }
        -: 1250:
        -: 1251:    //return success
    #####: 1252:    return 1;
        -: 1253:  }
        -: 1254:
        -: 1255:      //no second treasure_map found in hand
    #####: 1256:      return -1;
        -: 1257:    }
        -: 1258:
    #####: 1259:  return -1;
        -: 1260:}
        -: 1261:
function discardCard called 10008 returned 100% blocks executed 89%
    10008: 1262:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1263:{
        -: 1264:
        -: 1265:  //if card is not trashed, added to Played pile
    10008: 1266:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1267:    {
        -: 1268:      //add card to played pile
    10008: 1269:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    10008: 1270:      state->playedCardCount++;
        -: 1271:    }
        -: 1272:
        -: 1273:  //set played card to -1
    10008: 1274:  state->hand[currentPlayer][handPos] = -1;
        -: 1275:
        -: 1276:  //remove card from player's hand
    10008: 1277:  if ( handPos == (state->handCount[currentPlayer] - 1) )   //last card in hand array is played
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1278:    {
        -: 1279:      //reduce number of cards in hand
       11: 1280:      state->handCount[currentPlayer]--;
        -: 1281:    }
     9997: 1282:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1283:    {
        -: 1284:      //reduce number of cards in hand
    #####: 1285:      state->handCount[currentPlayer]--;
        -: 1286:    }
        -: 1287:  else
        -: 1288:    {
        -: 1289:      //replace discarded card with last card in hand
     9997: 1290:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1291:      //set last card to -1
     9997: 1292:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1293:      //reduce number of cards in hand
     9997: 1294:      state->handCount[currentPlayer]--;
        -: 1295:    }
        -: 1296:
    10008: 1297:  return 0;
        -: 1298:}
        -: 1299:
function gainCard called 5 returned 100% blocks executed 100%
        5: 1300:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1301:{
        -: 1302:  //Note: supplyPos is enum of choosen card
        -: 1303:
        -: 1304:  //check if supply pile is empty (0) or card is not used in game (-1)
        5: 1305:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 40% (fallthrough)
branch  2 taken 60%
        -: 1306:    {
        2: 1307:      return -1;
        -: 1308:    }
        -: 1309:
        -: 1310:  //added card for [whoseTurn] current player:
        -: 1311:  // toFlag = 0 : add to discard
        -: 1312:  // toFlag = 1 : add to deck
        -: 1313:  // toFlag = 2 : add to hand
        -: 1314:
        3: 1315:  if (toFlag == 1)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -: 1316:    {
        1: 1317:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        1: 1318:      state->deckCount[player]++;
        -: 1319:    }
        2: 1320:  else if (toFlag == 2)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1321:    {
        1: 1322:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1323:      state->handCount[player]++;
        -: 1324:    }
        -: 1325:  else
        -: 1326:    {
        1: 1327:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        1: 1328:      state->discardCount[player]++;
        -: 1329:    }
        -: 1330:
        -: 1331:  //decrease number in supply pile
        3: 1332:  state->supplyCount[supplyPos]--;
        -: 1333:
        3: 1334:  return 0;
        -: 1335:}
        -: 1336:
function updateCoins called 20 returned 100% blocks executed 82%
       20: 1337:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1338:{
        -: 1339:  int i;
        -: 1340:
        -: 1341:  //reset coin count
       20: 1342:  state->coins = 0;
        -: 1343:
        -: 1344:  //add coins for each Treasure card in player's hand
      120: 1345:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1346:    {
      100: 1347:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1348:  {
       80: 1349:    state->coins += 1;
        -: 1350:  }
       20: 1351:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1352:  {
    #####: 1353:    state->coins += 2;
        -: 1354:  }
       20: 1355:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1356:  {
    #####: 1357:    state->coins += 3;
        -: 1358:  }
        -: 1359:    }
        -: 1360:
        -: 1361:  //add bonus
       20: 1362:  state->coins += bonus;
        -: 1363:
       20: 1364:  return 0;
        -: 1365:}
        -: 1366:
        -: 1367:
        -: 1368://end of dominion.c
